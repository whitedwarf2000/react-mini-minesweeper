{"version":3,"sources":["containers/Game/reducer.js","rootReducer.js","containers/Game/actionTypes.js","containers/Game/actions.js","utils/request.js","containers/Game/saga.js","rootSaga.js","configureStore.js","containers/Welcome/index.js","containers/Welcome/WelcomeScreen.js","containers/Game/selectors.js","components/Cell/index.js","components/Cell/Cell.js","constants.js","components/Board/Board.js","components/Board/index.js","containers/Game/components/BaseGame.js","utils/commons.js","containers/Game/components/Timer.js","containers/Game/Game.js","routes.js","containers/Game/Beginner.js","containers/Game/Advantage.js","utils/history.js","App.js","index.js"],"names":["initialState","minesData","error","isLoading","combineReducers","gameReducer","state","action","type","data","fetchMinesSuccess","parseJSON","response","status","json","checkStatus","Error","statusText","request","url","options","fetch","then","fetchMines","gameSaga","payload","params","size","mines","requestURL","call","msg","put","takeLatest","rootSaga","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","WelcomeScreen","connect","dispatch","reset","withRouter","props","history","useEffect","className","onClick","push","gameSelector","getMinesSelector","createSelector","getLoadingSelector","getErrorSelector","Cell","cell","openAllCell","travelBoard","isMine","isOpen","numberOfBoom","x","y","handleGetValueOfCell","GAME_STATUS","Board","memo","initBoard","winScore","startNewGame","handleGameStatus","handleResetState","useState","newBoard","setNewBoard","board","setBoard","userScore","setScore","hasWon","setWonGame","restartGame","setRestartGame","handleGameOver","cells","length","forEach","row","col","cellComponent","key","id","isNumberCell","handleTravelBoard","preScore","index","neighbors","i","map","BaseGame","results","j","replace","c","r","Math","random","toString","mine","hasBoom","createBoard","countNeighbour","Timer","isGameStart","isRefresh","seconds","setSeconds","interval","setInterval","clearInterval","Date","toISOString","substr","Game","getMines","defaultParams","setGameStart","setRefreshTime","gameStatus","alert","routes","path","component","createBrowserHistory","App","exact","from","to","route","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff116ca5.chunk.js","sourcesContent":["import {\r\n  FETCH_MINES,\r\n  FETCH_MINES_SUCCESS,\r\n  FETCH_MINES_FAIL,\r\n  RESET_STATE\r\n} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n  minesData: [],\r\n  error: null,\r\n  isLoading: false\r\n};\r\n\r\nexport const gameReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_MINES:\r\n      return { ...state, isLoading: true };\r\n    case FETCH_MINES_SUCCESS:\r\n      return { ...state, minesData: action.data, isLoading: false };\r\n    case FETCH_MINES_FAIL:\r\n      return { ...state, error: action.error, isLoading: false };\r\n    case RESET_STATE:\r\n      return { ...state, minesData: [], error: null, isLoading: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { gameReducer } from \"../src/containers/Game/reducer\";\r\n\r\nexport default combineReducers({ gameReducer });\r\n","export const FETCH_MINES = \"game/fetchMines\";\r\nexport const FETCH_MINES_SUCCESS = \"game/fetchMinesSuccess\";\r\nexport const FETCH_MINES_FAIL = \"game/fetchMinesFail\";\r\n\r\nexport const RESET_STATE = \"game/resetState\";","import {\r\n  FETCH_MINES,\r\n  FETCH_MINES_FAIL,\r\n  FETCH_MINES_SUCCESS,\r\n  RESET_STATE\r\n} from \"./actionTypes\";\r\n\r\nexport function fetchMines(params) {\r\n  return {\r\n    type: FETCH_MINES,\r\n    payload: {\r\n      params\r\n    }\r\n  };\r\n}\r\n\r\nexport function fetchMinesSuccess(data) {\r\n  return {\r\n    type: FETCH_MINES_SUCCESS,\r\n    data\r\n  };\r\n}\r\n\r\nexport function fetchMinesFail(error) {\r\n  return {\r\n    type: FETCH_MINES_FAIL,\r\n    error\r\n  };\r\n}\r\n\r\nexport function resetState() {\r\n  return {\r\n    type: RESET_STATE\r\n  };\r\n}","function parseJSON(response) {\r\n  if (response.status === 204 || response.status === 205) {\r\n    return null;\r\n  }\r\n  return response.json();\r\n}\r\n\r\nfunction checkStatus(response) {\r\n  if (response.status >= 200 && response.status < 300) {\r\n    return response;\r\n  }\r\n\r\n  const error = new Error(response.statusText);\r\n  error.response = response;\r\n  throw error;\r\n}\r\n\r\nexport default function request(url, options) {\r\n  return fetch(url, options)\r\n    .then(checkStatus)\r\n    .then(parseJSON);\r\n}","import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { FETCH_MINES } from \"./actionTypes\";\r\nimport { fetchMinesSuccess, fetchMinesFail } from \"./actions\";\r\n\r\nimport request from \"../../utils/request\";\r\n\r\nexport function* fetchMines(action) {\r\n  const {\r\n    params: { size, mines }\r\n  } = action.payload;\r\n\r\n  const requestURL =\r\n    `https://tiki-minesweeper.herokuapp.com/getMines?size=${size}&mines=${mines}`;\r\n\r\n  try {\r\n    const response = yield call(request, requestURL);\r\n    if (response && response.msg === \"success\") {\r\n      const { data } = response;\r\n      yield put(fetchMinesSuccess(data));\r\n    }\r\n  } catch (err) {\r\n    yield put(fetchMinesFail(err));\r\n  }\r\n}\r\n\r\nexport default function* gameSaga() {\r\n  yield takeLatest(FETCH_MINES, fetchMines);\r\n}","import gameSaga from \"./containers/Game/saga\";\r\n\r\nfunction* rootSaga() {\r\n  yield gameSaga()\r\n}\r\n\r\nexport default rootSaga;","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import WelcomeScreen from \"./WelcomeScreen\";\r\n\r\nexport default WelcomeScreen;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nimport { resetState } from \"../Game/actions\";\r\n\r\nconst WelcomeScreen = props => {\r\n  const { history, reset } = props;\r\n\r\n  const startGameForBeginner = () => {\r\n    history.push(\"/game/beginner\");\r\n  };\r\n\r\n  const startGameForAdvantage = () => {\r\n    history.push(\"/game/advantage\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    reset();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"welcome-wrapper\">\r\n      <div className=\"welcome-wrapper_infor\">\r\n        <p>Select your level</p>\r\n        <button className=\"button beginner-level\" onClick={startGameForBeginner}>Beginner</button>\r\n        <button className=\"button advantage-level\" onClick={startGameForAdvantage}>Advantage</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    reset: () => {\r\n      dispatch(resetState());\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(WelcomeScreen));\r\n","\r\nimport { createSelector } from \"reselect\";\r\n\r\nconst gameSelector = state => state.gameReducer;\r\n\r\nconst getMinesSelector = createSelector(\r\n  gameSelector,\r\n  mines => mines.minesData\r\n);\r\n\r\nconst getLoadingSelector = createSelector(\r\n  gameSelector,\r\n  mines => mines.isLoading\r\n);\r\n\r\nconst getErrorSelector = createSelector(\r\n  gameSelector,\r\n  mines => mines.error\r\n);\r\n\r\nexport { getMinesSelector, getLoadingSelector, getErrorSelector };\r\n","import Cell from \"./Cell\";\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.scss\";\r\n\r\nconst Cell = props => {\r\n  const { cell, openAllCell, travelBoard } = props;\r\n  const { isMine, isOpen, numberOfBoom } = cell;\r\n\r\n  const handleGetValueOfCell = cell => {\r\n    if (cell.isMine) {\r\n      if (openAllCell) {\r\n        openAllCell();\r\n      }\r\n    } else if (!cell.isOpen) {\r\n      travelBoard(cell.x, cell.y);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`cell ${isOpen ? \"cell_visible\" : \"\"}`}\r\n      onClick={() => handleGetValueOfCell(cell)}\r\n    >\r\n      <div className={`${isOpen ? \"show\" : \"hidden\"}`}>\r\n        {isOpen ? (\r\n          isMine ? (\r\n            <span>💣</span>\r\n          ) : (\r\n            <span>{numberOfBoom === 0 ? null : numberOfBoom}</span>\r\n          )\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCell.propTypes = {\r\n  cell: PropTypes.object,\r\n  openAllCell: PropTypes.func,\r\n  travelBoard: PropTypes.func\r\n};\r\n\r\nexport default Cell;\r\n","export const GAME_STATUS = {\r\n  WIN: 'WIN',\r\n  LOST: 'LOST'\r\n};\r\n","import React, { memo, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport Cell from \"../Cell\";\r\nimport { GAME_STATUS } from \"../../constants\";\r\nimport \"./styles.scss\";\r\n\r\nconst Board = memo(props => {\r\n  const {\r\n    initBoard,\r\n    size,\r\n    winScore,\r\n    startNewGame,\r\n    history,\r\n    handleGameStatus,\r\n    handleResetState\r\n  } = props;\r\n\r\n  const [newBoard, setNewBoard] = useState([]);\r\n  const [board, setBoard] = useState([]);\r\n  const [userScore, setScore] = useState(0);\r\n\r\n  const [hasWon, setWonGame] = useState(false);\r\n  const [restartGame, setRestartGame] = useState(false);\r\n\r\n  const handleTravelBoard = (x, y, isOpen, cell) => {\r\n    if (isOpen) return;\r\n    if (x < 0 || y < 0) return;\r\n    if (x >= size || y >= size) return;\r\n    if (cell) return;\r\n\r\n    newBoard[x][y].isOpen = true;\r\n    setScore(preScore => preScore + 1);\r\n\r\n    const neighbors = [\r\n      [x - 1, y - 1],\r\n      [x - 1, y],\r\n      [x - 1, y + 1],\r\n      [x, y + 1],\r\n      [x + 1, y + 1],\r\n      [x + 1, y],\r\n      [x + 1, y - 1],\r\n      [x, y - 1]\r\n    ];\r\n\r\n    const isValidPosition = index => {\r\n      return (\r\n        neighbors[index][0] > -1 &&\r\n        neighbors[index][0] < newBoard.length &&\r\n        neighbors[index][1] > -1 &&\r\n        neighbors[index][1] < newBoard.length\r\n      );\r\n    };\r\n\r\n    for (let i = 0; i < 8; i += 1) {\r\n      if (isValidPosition(i)) {\r\n        handleTravelBoard(\r\n          neighbors[i][0],\r\n          neighbors[i][1],\r\n          newBoard[neighbors[i][0]][neighbors[i][1]].isOpen,\r\n          isNumberCell(x, y)\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleGameOver = () => {\r\n    const cells = [];\r\n    newBoard &&\r\n      newBoard.length > 0 &&\r\n      newBoard.forEach(row => {\r\n        row.forEach(col => {\r\n          col.isOpen = true;\r\n          const cellComponent = <Cell key={col.id} cell={col} />;\r\n          cells.push(cellComponent);\r\n        });\r\n      });\r\n    setBoard(cells);\r\n    setRestartGame(true);\r\n    handleGameStatus(GAME_STATUS.LOST);\r\n  };\r\n\r\n  const handleStartNewGame = () => {\r\n    setRestartGame(false);\r\n    setScore(0);\r\n    startNewGame();\r\n  };\r\n\r\n  const isNumberCell = (x, y) =>\r\n    newBoard[x][y].numberOfBoom !== 0 && !newBoard[x][y].isMine;\r\n\r\n  useEffect(() => {\r\n    const cells = [];\r\n    newBoard &&\r\n      newBoard.length > 0 &&\r\n      newBoard.forEach(row => {\r\n        row.forEach(col => {\r\n          const cellComponent = (\r\n            <Cell\r\n              key={col.id}\r\n              cell={col}\r\n              openAllCell={handleGameOver}\r\n              travelBoard={(x, y) => {\r\n                handleTravelBoard(x, y, false, false);\r\n              }}\r\n            />\r\n          );\r\n          cells.push(cellComponent);\r\n        });\r\n      });\r\n    setBoard(cells);\r\n  }, [newBoard, userScore]);\r\n\r\n  useEffect(() => {\r\n    setNewBoard(initBoard);\r\n  }, [initBoard]);\r\n\r\n  useEffect(() => {\r\n    if (userScore === winScore) {\r\n      handleGameStatus(GAME_STATUS.WIN);\r\n      setWonGame(true);\r\n    }\r\n  }, [userScore]);\r\n\r\n  return (\r\n    <>\r\n      {hasWon || restartGame ? (\r\n        <>\r\n          <button\r\n            className=\"button play-again\"\r\n            onClick={() => {\r\n              handleResetState();\r\n              history.push(\"/welcome\");\r\n            }}\r\n          >\r\n            Back to home\r\n          </button>\r\n          <button className=\"button play-again\" onClick={handleStartNewGame}>\r\n            Reset game\r\n          </button>\r\n        </>\r\n      ) : null}\r\n      <div\r\n        className={`board ${size === 9 ? \"beginner-board\" : \"advantage-board\"}`}\r\n      >\r\n        {board && board.length > 0 && board.map(cell => cell)}\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nBoard.propTypes = {\r\n  initBoard: PropTypes.array,\r\n  size: PropTypes.number,\r\n  winScore: PropTypes.number,\r\n  startNewGame: PropTypes.func,\r\n  history: PropTypes.any,\r\n  handleGameStatus: PropTypes.func\r\n};\r\n\r\nexport default withRouter(Board);\r\n","import Board from \"./Board\";\r\n\r\nexport default Board;\r\n","import React, { memo, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Board from \"../../../components/Board\";\r\nimport { uuidv4 } from \"../../../utils/commons\";\r\n\r\nconst BaseGame = memo(props => {\r\n  const {\r\n    mines,\r\n    isLoading,\r\n    error,\r\n    size,\r\n    winScore,\r\n    startNewGame,\r\n    handleGameStatus,\r\n    handleResetState\r\n  } = props;\r\n\r\n  const [initBoard, setBoard] = useState([]);\r\n\r\n  const createBoard = () => {\r\n    let results = [];\r\n    for (let i = 0; i < size; i += 1) {\r\n      results.push([]);\r\n      for (let j = 0; j < size; j += 1) {\r\n        results[i][j] = {\r\n          id: uuidv4(),\r\n          x: i,\r\n          y: j,\r\n          isMine: false,\r\n          numberOfBoom: 0,\r\n          isOpen: false\r\n        };\r\n      }\r\n    }\r\n    mines &&\r\n      mines.length > 0 &&\r\n      mines.forEach(mine => {\r\n        const hasBoom = results[mine.x][mine.y]; // position has a boom\r\n        if (hasBoom) {\r\n          hasBoom.isMine = true;\r\n        }\r\n      });\r\n    return results;\r\n  };\r\n\r\n  const countNeighbour = () => {\r\n    const newBoard = createBoard();\r\n    mines &&\r\n      mines.length > 0 &&\r\n      mines.forEach(mine => {\r\n        const neighbors = [\r\n          [mine.x - 1, mine.y - 1],\r\n          [mine.x - 1, mine.y],\r\n          [mine.x - 1, mine.y + 1],\r\n          [mine.x, mine.y + 1],\r\n          [mine.x + 1, mine.y + 1],\r\n          [mine.x + 1, mine.y],\r\n          [mine.x + 1, mine.y - 1],\r\n          [mine.x, mine.y - 1]\r\n        ];\r\n\r\n        const isValidPosition = index => {\r\n          return (\r\n            neighbors[index][0] > -1 &&\r\n            neighbors[index][0] < newBoard.length &&\r\n            neighbors[index][1] > -1 &&\r\n            neighbors[index][1] < newBoard.length\r\n          );\r\n        };\r\n\r\n        for (let i = 0; i < 8; i += 1) {\r\n          if (isValidPosition(i)) {\r\n            if (!newBoard[neighbors[i][0]][neighbors[i][1]].isMine) {\r\n              newBoard[neighbors[i][0]][neighbors[i][1]].numberOfBoom += 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n    return newBoard;\r\n  };\r\n\r\n  const board = countNeighbour();\r\n\r\n  useEffect(() => {\r\n    setBoard(board);\r\n  }, [mines]);\r\n\r\n  return (\r\n    <>\r\n      {error ? (\r\n        <>Somethings when wrong???</>\r\n      ) : isLoading ? (\r\n        <p>Chờ tí nha...</p>\r\n      ) : (\r\n        <Board\r\n          initBoard={initBoard}\r\n          size={size}\r\n          winScore={winScore}\r\n          startNewGame={startNewGame}\r\n          handleGameStatus={handleGameStatus}\r\n          handleResetState={handleResetState}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nBaseGame.propTypes = {\r\n  mines: PropTypes.array,\r\n  isLoading: PropTypes.bool,\r\n  error: PropTypes.any,\r\n  size: PropTypes.number,\r\n  winScore: PropTypes.number,\r\n  startNewGame: PropTypes.func,\r\n  handleGameStatus: PropTypes.func\r\n};\r\n\r\nexport default BaseGame;\r\n","export const uuidv4 = () => {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n};\r\n","import React, { memo, useEffect, useState } from \"react\";\r\n\r\nconst Timer = memo(props => {\r\n  const { isGameStart, isRefresh } = props;\r\n\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  const formatTimer = () =>\r\n    new Date(seconds * 1000).toISOString().substr(11, 8);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isGameStart) {\r\n      interval = setInterval(() => {\r\n        setSeconds(seconds => seconds + 1);\r\n      }, 1000);\r\n    } else if (!isGameStart && seconds !== 0) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isGameStart]);\r\n\r\n  useEffect(() => {\r\n    if (isRefresh) {\r\n      setSeconds(0);\r\n    }\r\n  }, [isGameStart, isRefresh]);\r\n\r\n  return (\r\n    <h2>Time: {formatTimer()}</h2>\r\n  );\r\n});\r\n\r\nexport default Timer;\r\n","import React, { memo, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { fetchMines, resetState } from \"./actions\";\r\nimport {\r\n  getMinesSelector,\r\n  getLoadingSelector,\r\n  getErrorSelector\r\n} from \"./selectors\";\r\n\r\nimport BaseGame from \"./components/BaseGame\";\r\nimport Timer from \"./components/Timer\";\r\nimport { GAME_STATUS } from \"../../constants\";\r\n\r\nconst Game = memo(props => {\r\n  const { getMines, mines, isLoading, error, defaultParams, reset } = props;\r\n\r\n  const size = defaultParams.size;\r\n  const winScore = size * size - defaultParams.mines;\r\n\r\n  const [isGameStart, setGameStart] = useState(false);\r\n  const [isRefresh, setRefreshTime] = useState(false);\r\n\r\n  const handleGameStatus = gameStatus => {\r\n    if (gameStatus === GAME_STATUS.WIN) alert(\"You win\");\r\n    else alert(\"You lost\");\r\n    setGameStart(false);\r\n    setRefreshTime(false);\r\n  };\r\n\r\n  const startGame = () => {\r\n    getMines(defaultParams);\r\n    setRefreshTime(true);\r\n  };\r\n\r\n  const handleResetState = () => {\r\n    reset();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMines(defaultParams);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (mines && mines.length > 0) {\r\n      setGameStart(true);\r\n    }\r\n  }, [mines]);\r\n\r\n  return (\r\n    <>\r\n      <Timer isGameStart={isGameStart} isRefresh={isRefresh} />\r\n      <BaseGame\r\n        mines={mines}\r\n        isLoading={isLoading}\r\n        error={error}\r\n        size={size}\r\n        winScore={winScore}\r\n        startNewGame={startGame}\r\n        handleGameStatus={handleGameStatus}\r\n        handleResetState={handleResetState}\r\n      />\r\n    </>\r\n  );\r\n});\r\n\r\nGame.propTypes = {\r\n  getMines: PropTypes.func,\r\n  mines: PropTypes.array,\r\n  isLoading: PropTypes.bool,\r\n  error: PropTypes.any,\r\n  defaultParams: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    error: getErrorSelector(state),\r\n    isLoading: getLoadingSelector(state),\r\n    mines: getMinesSelector(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getMines: params => {\r\n      dispatch(fetchMines(params));\r\n    },\r\n    reset: () => {\r\n      dispatch(resetState());\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Game);\r\n","import WelcomeScreen from \"./containers/Welcome\";\r\n\r\nimport Advantage from \"./containers/Game/Advantage\";\r\nimport Beginner from \"./containers/Game/Beginner\";\r\n\r\nexport const routes = [\r\n  {\r\n    path: \"/welcome\",\r\n    component: WelcomeScreen\r\n  },\r\n  {\r\n    path: \"/game/beginner\",\r\n    component: Beginner\r\n  },\r\n  {\r\n    path: \"/game/advantage\",\r\n    component: Advantage\r\n  }\r\n];\r\n","import React from \"react\";\r\nimport Game from \"./Game\";\r\n\r\nconst Beginner = () => {\r\n  const defaultParams = {\r\n    size: 9,\r\n    mines: 10\r\n  };\r\n\r\n  return <Game defaultParams={defaultParams}/>\r\n};\r\n\r\nexport default Beginner;\r\n","import React from \"react\";\r\nimport Game from \"./Game\";\r\n\r\nconst Advantage = () => {\r\n  const defaultParams = {\r\n    size: 16,\r\n    mines: 40\r\n  };\r\n\r\n  return <Game defaultParams={defaultParams}/>\r\n};\r\n\r\nexport default Advantage;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;\r\n","import React from \"react\";\r\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { routes } from \"./routes\";\r\nimport history from \"./utils/history\";\r\n\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Minesweeper</h1>\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Redirect exact from=\"/\" to=\"/welcome\" />\r\n          {routes.map((route, index) => {\r\n            return <Route key={index} path={route.path} component={route.component} />;\r\n          })}\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { store } from './configureStore';\r\nimport App from \"./App\";\r\nimport \"./index.scss\";\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}